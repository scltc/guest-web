def outputPath = "${projectDir}/../docs"

def ngCommand = (System.getProperty("os.name").toUpperCase().contains("WINDOWS"))
	            ? "ng.cmd"
			        : "ng";

task siteBuild(type:Exec) {
     commandLine "$ngCommand", "build", "--no-progress", "--prod", "--delete-output-path", "--output-path", "$outputPath"
}

task siteDeploy(dependsOn: 'siteBuild') {
  doLast {
    ssh.run {
      session(remotes) {
      println("${remotes.path}")
      execute "rm -rf ${remotes.path}/site"
//    execute "mkdir -p ${remotes.path}"
      execute "mkdir -p ${remotes.path}/site"
//    execute "mkdir -p ${remotes.path}/site/images"
//    new File("${buildDir}/libs").listFiles().each { put(from: it, into: "${remotes.path}") }
//    execute "mkdir -p ${remotes.path}/scripts"
/*
      new File("${buildDir}/../scripts").listFiles().each {
        put(from: it, into: "${remotes.path}")
        // If building on Windows, the scripts may have \r\n line separators that Linux won't like.  Fix them.
        execute "tr -d '\\r' < ${remotes.path}/${it.name} > ${remotes.path}/${it.name}.tmp && mv --force ${remotes.path}/${it.name}.tmp ${remotes.path}/${it.name}"
      }
*/
      new File("${outputPath}").listFiles().each {
        println("${remotes.path}/site/${it.name}")
        put(from: it, into: "${remotes.path}/site/${it.name}")
      }
	  /*
      execute "chmod +x ${remotes.path}/*"
      execute "sudo ${remotes.path}/webserver-register"
//    put from: 'build/libs/' + project.name + '-all-' + version + '.jar', into: '.'
//    execute 'sudo service tomcat restart'
*/
      }
    }
  }
}
