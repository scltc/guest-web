description = 'Exhibit Web Server'

buildscript {
  repositories {
    mavenLocal()
    mavenCentral()
  }

  dependencies { classpath 'net.sf.proguard:proguard-gradle:6.1.1' }
}

dependencies {

  compile project(':ev3dev-lang-java')

//	compile group: 'org.nanohttpd', name: 'nanohttpd', version: '2.3.1'
//	compile group: 'org.nanohttpd', name: 'nanohttpd-webserver', version: '2.3.1'

	compile project(':nanohttpd')
  compile project(':nanohttpd-nanolets')
	compile project(':nanohttpd-webserver')
  compile project(':nanohttpd-websocket')

  // https://mvnrepository.com/artifact/com.fasterxml.jackson.core/jackson-databind
  compile group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.9.9'
  // https://mvnrepository.com/artifact/com.github.briandilley.jsonrpc4j/jsonrpc4j
  compile group: 'com.github.briandilley.jsonrpc4j', name: 'jsonrpc4j', version: '1.5.3'
}

tasks.withType(JavaCompile) {
    options.deprecation = true
}

// Create a single *.jar with all dependencies
task fatJar(type: Jar) {
	manifest {
        attributes 'Implementation-Title': 'Exhibit Web Server',  
        	'Implementation-Version': version,
        	'Main-Class': 'com.brickintellect.exhibit.Main'
    }
    baseName = 'exhibit-web-server-all' //project.name + '-all'
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
}

// Run ProGuard to compress our *.jar.
task ('proguard', dependsOn: 'fatJar', type: proguard.gradle.ProGuardTask) {

  // Specify the input and output jars.
  injars 'build/libs/exhibit-web-server-all-1.0.0-SNAPSHOT.jar',
    filter:'!META-INF/LICENSE,!META-INF/NOTICE,!com/googlecode/jsonrpc4j/ProxyUtil**,!com/googlecode/jsonrpc4j/spring/**'
  outjars 'build/libs/exhibit-web-server-1.0.0-SNAPSHOT.jar'

  // Automatically handle the Java version of this build.
  if (System.getProperty('java.version').startsWith('1.')) {
    // Before Java 9, the runtime classes were packaged in a single jar file.
    libraryjars "${System.getProperty('java.home')}/lib/rt.jar"
  } else {
    // As of Java 9, the runtime classes are packaged in modular jmod files.
    libraryjars "${System.getProperty('java.home')}/jmods/java.base.jmod", jarfilter: '!**.jar', filter: '!module-info.class'
    //libraryjars "${System.getProperty('java.home')}/jmods/....."
  }

  //libraryjars 'junit.jar'
  //libraryjars 'servlet.jar'
  //libraryjars 'jai_core.jar'
  //...
  // jsonrpc4j brings all kinds of bagage we don't need/use!
  dontwarn "javax.crypto.**"
  dontwarn "javax.portlet.**"
  dontwarn "javax.servlet.**"
  dontwarn "org.aopalliance.**"
  dontwarn "org.apache.http.**"
  dontwarn "org.springframework.**"
  // dontwarn org.apache.commons.codec.**
  dontwarn "org.slf4j.impl.**"

  keep 'class com.googlecode.jsonrpc4j.ErrorData { \
    <methods>; \
  }'

  // Save the obfuscation mapping to a file, so you can de-obfuscate any stack
  // traces later on. Keep a fixed source file attribute and all line number
  // tables to get line numbers in the stack traces.
  // You can comment this out if you're not interested in stack traces.

  printmapping 'out.map'
  renamesourcefileattribute 'SourceFile'
//  keepattributes 'SourceFile,LineNumberTable'


  // Preserve all annotations.

  keepattributes '*Annotation*,EnclosingMethod,Exceptions,Signature'

  //keepattributes 'Signature'
  // keepparameternames

  // You can print out the seeds that are matching the keep options below.

  //printseeds 'out.seeds'

  // Preserve all public applications.
  keepclasseswithmembers 'public class * { \
    public static void main(java.lang.String[]); \
  }'

  // Preserve all native method names and the names of their classes.
//    keepclasseswithmembernames,includedescriptorclasses 'class * { \
//        native <methods>; \
//    }'

  // Preserve the special static methods that are required in all enumeration
  // classes.
  keepclassmembers allowoptimization: true, 'enum * { \
    public static **[] values(); \
    public static ** valueOf(java.lang.String); \
  }'

  // Explicitly preserve all serialization members. The Serializable interface
  // is only a marker interface, so it wouldn't save them.
  // You can comment this out if your application doesn't use serialization.
  // If your code contains serializable classes that have to be backward 
  // compatible, please refer to the manual.

  keepclassmembers 'class * implements java.io.Serializable { \
    static final long serialVersionUID; \
    static final java.io.ObjectStreamField[] serialPersistentFields; \
    private void writeObject(java.io.ObjectOutputStream); \
    private void readObject(java.io.ObjectInputStream); \
    java.lang.Object writeReplace(); \
    java.lang.Object readResolve(); \
  }'

  // Your application may contain more items that need to be preserved; 
  // typically classes that are dynamically created using Class.forName:

  // keep 'public class com.example.MyClass'
  // keep 'public interface com.example.MyInterface'
  // keep 'public class * implements com.example.MyInterface'

  // Keep application settings classes.

  keep 'class com.brickintellect.webserver.Settings { \
    *; \
  }'

  keep 'class com.brickintellect.exhibit.CatchAndThrow$Settings { \
    *; \
  }'

  keep 'class com.brickintellect.exhibit.HeadTurner$Settings { \
    *; \
  }'

  // Keep exhibit public interface.

/*
  keepattributes 'Signature'
  keepparameternames
*/

keep 'class com.brickintellect.exhibit.CatchAndThrowPlayController$CatchAndThrowPlayState { \
  *; \
}'

keep 'class com.brickintellect.exhibit.HeadTurnerPlayController$HeadTurnerPlayState { \
  *; \
}'

keep 'interface com.brickintellect.exhibit.Exhibit$** { \
  *; \
}'

keep 'class com.brickintellect.exhibit.Exhibit$** { \
  public <methods>; \
}'


  // Keep Java RMI implementations.

  // keepattributes 'Exceptions'

  keep 'interface com.brickintellect.webserver.WebServer$IWebSocketService { \
    <methods>; \
  }'

  keep 'class com.brickintellect.webserver.WebServer$WebSocketService { \
    <methods>; \
  }'

  keep 'interface * extends java.rmi.Remote { \
    <methods>; \
  }'

  keep 'class * implements java.rmi.Remote { \
    <init>(java.rmi.activation.ActivationID, java.rmi.MarshalledObject); \
  }'

  // Keep NanoHTTPD Nanolet implementation class names.

  keep 'class ** extends org.nanohttpd.router.RouterNanoHTTPD$UriResponder { \
  }'

  // Jackson
  
  keepnames 'class com.fasterxml.jackson.** { \
    *; \
  }'

/*
  keep '@com.fasterxml.jackson.annotation.JsonIgnoreProperties class * { *; }'
  keep 'class com.fasterxml.** { *; }'
  keep 'class org.codehaus.** { *; }'
  keepnames 'class com.fasterxml.jackson.** { *; }'
  keepclassmembers 'public final enum com.fasterxml.jackson.annotation.JsonAutoDetect$Visibility { \
    public static final com.fasterxml.jackson.annotation.JsonAutoDetect$Visibility *; \
  }'
  */
}

task serverDeploy(dependsOn: 'proguard') {
  doLast {
    ssh.run {
      session(remotes) {
      println("${remotes.path}")
      execute "rm -rf ${remotes.path}"
      execute "mkdir -p ${remotes.path}"
//    execute "mkdir -p ${remotes.path}/site/images"
      new File("${buildDir}/libs").listFiles().each {
//      if (!"${it.name}".contains('-all-')) {
          println("${remotes.path}/${it.name}")
          put(from: it, into: "${remotes.path}")
//      }
      }
//    execute "mkdir -p ${remotes.path}/scripts"
      new File("${buildDir}/../scripts").listFiles().each {
        println("${remotes.path}/${it.name}")
        put(from: it, into: "${remotes.path}")
        // If building on Windows, the scripts may have \r\n line separators that Linux won't like.  Fix them.
        execute "tr -d '\\r' < ${remotes.path}/${it.name} > ${remotes.path}/${it.name}.tmp && mv --force ${remotes.path}/${it.name}.tmp ${remotes.path}/${it.name}"
        execute "chmod +x ${remotes.path}/${it.name}"
      }
/*
      execute "mkdir -p ${remotes.path}/site"
      new File("${buildDir}/../site").listFiles().each {
        println("${remotes.path}/site/${it.name}")
        put(from: it, into: "${remotes.path}/site/${it.name}")
      }
*/
      execute "sudo ${remotes.path}/webserver-register"
//    put from: 'build/libs/' + project.name + '-all-' + version + '.jar', into: '.'
//    execute 'sudo service tomcat restart'
      }
    }
  }
}
